<?php

namespace Omnipay\Nexi\Message;

use Omnipay\Common\Message\AbstractRequest as BaseAbstractRequest;
use Omnipay\Common\Exception\InvalidRequestException;

/**
 * Abstract Request
 */
abstract class AbstractRequest extends BaseAbstractRequest
{
	protected $liveEndpoint = 'https://ecommerce.nexi.it/ecomm/ecomm/DispatcherServlet';
	protected $testEndpoint = 'https://int-ecommerce.nexi.it/ecomm/ecomm/DispatcherServlet';
	
	/**
	 * Get the endpoint where the request should be made.
	 *
	 * @return string the URL of the endpoint
	 */
	public function getEndpoint()
	{
		return $this->getTestMode() ? $this->testEndpoint : $this->liveEndpoint;
	}

	public function getAlias()
	{
		return $this->getParameter('alias');
	}

	public function setAlias($value)
	{
		return $this->setParameter('alias', $value);
	}

	public function setAmount($value)
	{
		return $this->setParameter('importo', $value);
	}
	public function getAmount()
	{
		return $this->getParameter('importo');
	}
	
	public function setCurrency($value)
	{
		return $this->setParameter('divisa', $value);
	}
	public function getCurrency()
	{
		return $this->getParameter('divisa');
	}
	
	public function setCodTrans($value)
	{
		return $this->setParameter('codTrans', $value);
	}
	public function getCodTrans()
	{
		return $this->getParameter('codTrans');
	}
	
	public function setReturnUrl($value)
	{
		return $this->setParameter('url', $value);
	}
	public function getReturnUrl()
	{
		return $this->getParameter('url');
	}
	
	public function setCancelUrl($value)
	{
		return $this->setParameter('url_back', $value);
	}
	public function getCancelUrl()
	{
		return $this->getParameter('url_back');
	}
	
	public function setMac($value)
	{
		return $this->setParameter('mac', $value);
	}
	public function getMac()
	{
		return $this->getParameter('mac');
	}
	
	public function setSecretKey($value)
	{
		return $this->setParameter('secret_key', $value);
	}
	public function getSecretKey()
	{
		return $this->getParameter('secret_key');
	}
	
	public function setPostUrlS2s($value)
	{
		return $this->setParameter('urlpost', $value);
	}
	public function getPostUrlS2s()
	{
		return $this->getParameter('urlpost');
	}
	
	public function setEmail($value)
	{
		return $this->setParameter('email', $value);
	}
	public function getEmail()
	{
		return $this->getParameter('email');
	}
	
	public function setFirstName($value)
	{
		return $this->setParameter('firstName', $value);
	}
	public function getFirstName()
	{
		return $this->getParameter('firstName');
	}
	
	public function setLastName($value)
	{
		return $this->setParameter('lastName', $value);
	}
	public function getLastName()
	{
		return $this->getParameter('lastName');
	}
	public function setCompleteRequest($value)
	{
		return $this->setParameter('complete_request', $value);
	}
	public function GetCompleteRequest($value)
	{
		return $this->getParameter('complete_request');
	}
	
	public function getHttpRequest()
	{
		return $this->httpRequest;
	}
	
	
	public function setCard($value)
	{
		if(isset($value['email'])){
			$this->setEmail($value['email']);
		}
		if(isset($value['firstName'])){
			$this->setFirstName($value['firstName']);
		}
		if(isset($value['lastName'])){
			$this->setLastName($value['lastName']);
		}
		return $this->setParameter('card', $value);
	}
	public function getCard()
	{
		return $this->getParameter('card');
	}
	
	
	/**
	 * Get the transaction ID.
	 *
	 * The transaction ID is the identifier generated by the merchant website.
	 *
	 * @return string
	 */
	public function getTransactionId()
	{
		return $this->getParameter('codTrans');
	}
	
	/**
	 * Sets the transaction ID.
	 *
	 * @param string $value
	 * @return $this
	 */
	public function setTransactionId($value)
	{
		return $this->setParameter('codTrans', $value);
	}
	
	
	/**
	 * Get HTTP Method.
	 *
	 * This is nearly always POST but can be over-ridden in sub classes.
	 *
	 * @return string the HTTP method
	 */
	public function getHttpMethod()
	{
		return 'POST';
	}
	
	/**
	 * {@inheritdoc}
	 */
	public function sendData($data)
	{
		$response = $this->httpClient->request(
				$this->getHttpMethod(),
				$this->getEndpoint(),
				$this->getHeaders(),
				json_encode($data)
				);
		
		$payload =  json_decode($response->getBody()->getContents(), true);
		
		return $this->createResponse($payload);
	}
	
	public function createResponse($data)
	{
		return $this->response = new Response($this, $data);
	}
	
	public function getHeaders()
	{
		return [];
	}
	
	/**
	 * Get the base data.
	 *
	 * Because the Ebanx gateway requires a common of fields for every request
	 * this function can be called to this common data in the format that the
	 * API requires.
	 *
	 * @return array
	 */
	public function getDefaultParameters()
	{
		$data                    = array();
		$data['alias'] = $this->getAlias();
		
		return $data;
	}
	
	/**
	 * Get the customer data.
	
	 * @return array
	 */
	public function getCustomerData()
	{
		$this->validate('card');
		return [
			'mail'=>$this->getEmail(),
			'nome'=>$this->getFirstName(),
			'cognome'=>$this->getLastName(),
		];
	}
	
	/**
	 * Get the payment data.
	 *
	 * Because the Ebanx gateway uses a common format for passing
	 * payment data to the API, this function can be called to get the
	 * data from the associated card object in the format that the
	 * API requires.
	 *
	 * @return array
	 */
	public function getPaymentData($aditionalPaymentData = [])
	{
		
		
		
		
		$customerData = $this->getCustomerData();
		$addressData  = $this->getAddressData();
		$splitData    = $this->getSplitData();
		
		$paymentData                          = array();
		$paymentData['merchant_payment_code'] = $this->getTransactionId();
		$paymentData['currency_code']         = $this->getCurrency();
		$paymentData['amount_total']          = $this->getAmount();
		$paymentData['payment_type_code']     = $this->getPaymentMethod();
		
		if ($notifyUrl = $this->getNotifyUrl()) {
			$paymentData['notification_url']      = $notifyUrl;
		}
		if ($returnUrl = $this->getReturnUrl()) {
			$paymentData['redirect_url']      = $returnUrl;
		}
		
		if ($paymentNote = $this->getNote()) {
			$paymentData['note']      = $paymentNote;
		}
		
		$paymentData = array_merge(
				$customerData,
				$addressData,
				$paymentData,
				$splitData,
				$aditionalPaymentData
				);
		
		return ['payment' => $paymentData];
	}

}